@page "/Data/ImportData"
@inject IConfiguration _config
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<ProofOfConceptBLZ.Data.ApplicationUser> _userManager

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ProofOfConceptBLZ.Data
@using ProofOfConceptBLZ.Models
@using Microsoft.AspNetCore.Identity;


<PageTitle>Import Data</PageTitle>

<h3>Import Data</h3>

<EditForm Model="DataModel" OnValidSubmit="@SubmitForm">
    <div>
        <label for="campaignDataName">Data Name:</label>
        <InputText id="campaignDataName" class="form-control" @bind-Value="DataModel.CampaignDataName" />
    </div>
    <div>
        <label for="fileupload">Data File:</label>
        <InputFile OnChange="@LoadFile" class="form-control" accept=".txt,.csv,.xlsx" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Upload</button>
</EditForm>


@if (isUploading)
{
    <br />
    <div class="spinner"></div>
    <p> Uploading...</p>
}

@* @if (file != null)
{
    <ul>
        <li>Name: @file.Name</li>
        <li>Last modified: @file.LastModified.ToString()</li>
        <li>Size (bytes): @file.Size</li>
        <li>Content type: @file.ContentType</li>
    </ul>
} *@

@if (errors.Count > 0)
{
    <br />
    <h2>Erors</h2>
    <ul class="text-danger">
        @foreach (string error in errors)
        {
            <li>@error</li>
        }

    </ul>
}

@code {

    private List<string> errors = new();
    private int maxFilesSize = 1024 * 1024 * 50; //50MB
    private int maxFiles = 1;
    private CampaignDataImportModel DataModel = new();
    private IBrowserFile? file;

    Boolean isUploading;

    private async Task SubmitForm()
    {
        try
        {
            isUploading = true;
            string relPath = await UploadFile();
            DataModel.FileName = relPath;
        }
        catch (Exception ex)
        {
            isUploading = false;
            errors.Add("Error: " + ex.Message);
        }
    }


    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> UploadFile()
    {
        if (file == null) return "";

        errors.Clear();

        try
        {
            string company = await getUserCompany();
            string trustedFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string configPath = _config.GetValue<string>("FileStorage");
            string authPath = company;
            string path = Path.Combine(configPath, authPath, trustedFileName);

            Directory.CreateDirectory(Path.Combine(configPath, authPath));
            string relPath = Path.Combine(authPath, trustedFileName);

            await using FileStream fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(maxFilesSize).CopyToAsync(fs);

            isUploading = false;

            return relPath;

        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error: " + ex.Message);
            isUploading = false;
            throw;
        }

    }

    private async Task<string> getUserCompany()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userM = await _userManager.FindByNameAsync(user.Identity.Name);
                return userM.CompanyID;
            }
        }
        catch (Exception)
        {

            throw;
        }

        return "";

    }

}
