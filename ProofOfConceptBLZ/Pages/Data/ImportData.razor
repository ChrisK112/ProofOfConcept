@page "/Data/ImportData"
@inject IConfiguration _config
@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<ProofOfConceptBLZ.Data.ApplicationUser> _userManager
@inject ISQLDataAccess _db
@inject NavigationManager _navigationManager

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ProofOfConceptBLZ.Data
@using ProofOfConceptBLZ.Models
@using Microsoft.AspNetCore.Identity;
@using System.Text.RegularExpressions
@using System.Text


<PageTitle>Import Data</PageTitle>

<h1>Import Data</h1>

<AuthorizeView>
    <Authorized>
    <br />
    @if (!importCompleted)
    {
            <EditForm Model="FileUploadModel" OnValidSubmit="@SubmitFileForm" Context="formContext">
            <div>
                <label for="fileupload">Data File:</label>
                <InputFile OnChange="@LoadFile" class="form-control" accept=".txt,.csv,.xlsx" />
            </div>
            <button class="btn btn-primary mt-3" type="submit" disabled="@isLoading">Upload</button>
        </EditForm>
        <br />
        <br />
    }
    else
    {
        <h4>Import completed successfuly.</h4>
        <br />
        <p>Datafile: @dataTableName</p>
        <p>Email Column: @emailColumnName</p>
        <br />
        <button class="btn btn-primary mt-3" type="button" onclick="@RefreshPage">New Import</button>
    }

    @if (isFileLoaded && !importCompleted)
    {
            <EditForm Model="DataUploadModel" OnValidSubmit="@SubmitDatabaseImport" Context="formContext">
            <DataAnnotationsValidator />
            <div>
                <label for="campaignDataName">Data Name:</label>
                <InputText id="campaignDataName" class="form-control" @bind-Value="DataUploadModel.DataFileName" />
            </div>
            <div>
                <label for="emailDataColumn">Select the column containing emails:</label>
                <InputSelect id="emailDataColumn" class="form-select" @bind-Value=DataUploadModel.EmailColumnName disabled="@isLoading">
                    <option>Select...</option>
                    @foreach (string columnName in dataColumnNames)
                    {
                        <option value="@columnName">@columnName</option>
                    }
                </InputSelect>
            </div>
            <button class="btn btn-primary mt-3" type="submit" disabled="@isLoading">Confirm Selection</button>
        </EditForm>
        <br />
        <br />


        <table class="table table-striped">
            <caption class="caption-top">Preview Data</caption>
            <thead title="Sample data">
                <tr>
                    @foreach (string columnName in dataColumnNames)
                    {
                        <th scope="col">@columnName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (PreviewDataRow rowO in previewTable)
                {
                    <tr @key=rowO>
                        @foreach (string cell in rowO.row)
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }


    @if (isLoading)
    {
        <br />
        <div class="spinner"></div>
    }


    @if (errors.Count > 0)
    {
        <br />
        <h2>Errors</h2>
        <ul class="text-danger">
            @foreach (string error in errors)
            {
                <li>@error</li>
            }

        </ul>
    }
    </Authorized>
</AuthorizeView>


@code {

    private List<string> errors = new();
    private int maxFilesSize = 1024 * 1024 * 50; //50MB
    private DataUploadModel DataUploadModel = new();
    private FileUploadModel FileUploadModel = new();
    private IBrowserFile? file;
    private string loadedFile;
    private List<string> dataColumnNames;
    private List<PreviewDataRow> previewTable;
    private string emailColumnName;
    private string dataTableName;
    private int previewTableMaxLineCount = 10; //not including header
    private Regex csvSplit = new Regex("(?:^|,)(\"(?:[^\"]+|\"\")*\"|[^,]*)", RegexOptions.Compiled);

    Boolean isLoading;
    Boolean isFileLoaded;
    Boolean importCompleted;

    private class PreviewDataRow
    {
        public List<string> row;
        public PreviewDataRow(List<string> _row)
        {
            row = _row;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user == null || !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo($"RedirectToLogin", false);
        }

    }

    void RefreshPage()
    {
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    private async Task SubmitDatabaseImport()
    {
        if (isLoading) return;
        isLoading = true;
        await Task.Delay(1000);

        //get info on file location, data file name, email column choice as local vars
        emailColumnName = DataUploadModel.EmailColumnName;
        string emailColumn = emailColumnName;
        string filePath = loadedFile;

        dataTableName = DataUploadModel.DataFileName;
        string databaseDataFileName = dataTableName;
        int companyId = await (getUserCompany());
        string username = await getUserName();
        DateTime time = DateTime.UtcNow;

        //create entry in DataTable table - result of  should be datatableid
        int DataTableId;
        try
        {
            DataTableId = await ImportNewDataTable(companyId, username, time, databaseDataFileName);
        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error while importing data table: " + ex.Message);
            return;
        }

        try
        {
            await ImportNewData(companyId, filePath, emailColumn, DataTableId);
        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error while importing data: " + ex.Message);
            return;
        }

        //update record count
        try
        {
            await UpdateDataTableRecordCount(DataTableId);
        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error while checking data: " + ex.Message);
            return;
        }

        //show completed
        isLoading = false;
        isFileLoaded = false;
        importCompleted = true;

    }

    //update record count
    private async Task UpdateDataTableRecordCount(int DataTableId)
    {
        await _db.SaveData("dbo.spDataTable_UpdateRecordCount", new { DataTableId = DataTableId });
    }

    //DataTable
    private async Task<int> ImportNewDataTable(int CompanyId, string UploadUser, DateTime UploadDateTime, string DataTableName)
    {
        return await _db.SaveDataReturn<int>("dbo.spDataTable_Insert", CreateDataTableModel(CompanyId, UploadUser, UploadDateTime, DataTableName));
    }

    //DataColumn, DataRow, DataCell
    private async Task ImportNewData(int companyId, string filePath, string emailColumn, int DataTableId)
    {
        string extension = Path.GetExtension(filePath);

        //start loop - for each column, for each row, for each cell
        using StreamReader reader = File.OpenText(filePath);

        string line = "";
        List<int> columnIdsList = new();
        int count = 0;
        previewTable = new();
        while ((line = reader.ReadLine()) != null)
        {
            if (count == 0) //header row - create column entries on database
            {
                dataColumnNames = GetLineSplit(line, extension);
                int columnIndex = 0;
                foreach (string dataColumnName in dataColumnNames)
                {
                    //create column, get id
                    Boolean isEmail = emailColumn.Equals(dataColumnName);
                    int DataColumnId = await _db.SaveDataReturn<int>("dbo.spDataColumn_Insert", CreateDataColumnModel(columnIndex, DataTableId, companyId, dataColumnName, isEmail));
                    columnIdsList.Add(DataColumnId);
                    columnIndex++;

                }

                count++;
                continue; //skip to next row
            }
            else
            {
                //create row and get id
                int rowIndex = count - 1;
                int DataRowId = await _db.SaveDataReturn<int>("dbo.spDataRow_Insert", CreateDataRowModel(rowIndex, DataTableId, companyId));

                List<string> rowList = new();
                rowList = GetLineSplit(line, extension);
                int currentColumnIndex = 0;
                foreach (string cell in rowList)
                {
                    //create cell
                    await _db.SaveData("dbo.spDataCell_Insert", CreateDataCellModel(DataTableId, DataRowId, columnIdsList.ElementAt(currentColumnIndex), companyId, cell));
                    currentColumnIndex++;
                }

                count++;
            }

        }
    }


    private async Task SubmitFileForm()
    {
        try
        {
            isLoading = true;
            isFileLoaded = false;
            loadedFile = "";
            string relPath = await UploadFile();

            //load column headers for email choice
            await LoadPreview(Path.Combine(_config.GetValue<string>("FileStorage"), relPath));

        }
        catch (Exception ex)
        {
            isLoading = false;
            errors.Add("Error: " + ex.Message);
        }
    }


    private void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> UploadFile()
    {
        if (file == null) return "";

        errors.Clear();

        try
        {
            int company = await getUserCompany();
            string trustedFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string configPath = _config.GetValue<string>("FileStorage");
            string authPath = company.ToString();
            string path = Path.Combine(configPath, authPath, trustedFileName);

            Directory.CreateDirectory(Path.Combine(configPath, authPath));
            string relPath = Path.Combine(authPath, trustedFileName);
            loadedFile = Path.Combine(configPath, relPath);

            await using FileStream fs = new FileStream(path, FileMode.Create);
            await file.OpenReadStream(maxFilesSize).CopyToAsync(fs);

            isLoading = false;

            return relPath;

        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error: " + ex.Message);
            isLoading = false;
            throw;
        }

    }

    private async Task LoadPreview(string filepath)
    {

        try
        {
            //determine file type

            //for now, only allows > .txt, .csv
            string extension = Path.GetExtension(filepath);

            if (extension.Equals(".txt") || extension.Equals(".csv"))
            {

                //await using FileStream fs = new FileStream(filepath, FileMode.Open);
                using StreamReader reader = File.OpenText(filepath);

                string line = "";
                int count = 0;
                previewTable = new();
                while((line =  reader.ReadLine()) != null)
                {
                    if (count == 0) //header row
                    {
                        dataColumnNames = GetLineSplit(line, extension);
                        count++;
                        continue; //skip to next row
                    }
                    else if (count == previewTableMaxLineCount)
                    {
                        break; //stop at max preview rows
                    }

                    count++;

                    List<string> rowList = new();
                    rowList = GetLineSplit(line, extension);
                    previewTable.Add(new PreviewDataRow(rowList));

                }


            }
            else
            {
                throw(new Exception("Unsupported filetype! : " + extension));

            }

        }
        catch (Exception ex)
        {
            errors.Add("File: " + file.Name + " Error: " + ex.Message);
            isLoading = false;
            throw;
        }

        isFileLoaded = true;


    }

    private List<string> GetLineSplit(string line, string extension)
    {
        List<string> ret = new();
        if (extension.Equals(".txt"))
        {
            ret = line.Split('\t').ToList();
        }

        if (extension.Equals(".csv"))
        {
            ret = QuotedSplit2(line, ",").ToList();

        }
        return ret;
    }


    private async Task<int> getUserCompany()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userM = await _userManager.FindByNameAsync(user.Identity.Name);
                return userM.CompanyID;
            }
        }
        catch (Exception)
        {

            throw;
        }

        return 0;

    }

    private async Task<string> getUserName()
    {
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userM = await _userManager.FindByNameAsync(user.Identity.Name);
                return userM.UserName;
            }
        }
        catch (Exception)
        {

            throw;
        }

        return "";

    }

    public static IEnumerable<string> QuotedSplit2(string s, string delim)
    {
        const char quote = '\"';

        var sb = new StringBuilder(s.Length);
        var counter = 0;
        while (counter < s.Length)
        {
            // if starts with delmiter if so read ahead to see if matches
            if (delim[0] == s[counter] &&
                delim.SequenceEqual(ReadNext(s, counter, delim.Length)))
            {
                yield return sb.ToString();
                sb.Clear();
                counter = counter + delim.Length; // Move the counter past the delimiter
            }
            // if we hit a quote read until we hit another quote or end of string
            else if (s[counter] == quote)
            {
                sb.Append(s[counter++]);
                while (counter < s.Length && s[counter] != quote)
                {
                    sb.Append(s[counter++]);
                }
                // if not end of string then we hit a quote add the quote
                if (counter < s.Length)
                {
                    sb.Append(s[counter++]);
                }
            }
            else
            {
                sb.Append(s[counter++]);
            }
        }

        if (sb.Length > 0)
        {
            yield return sb.ToString();
        }
    }

    private static IEnumerable<char> ReadNext(string str, int currentPosition, int count)
    {
        for (var i = 0; i < count; i++)
        {
            if (currentPosition + i >= str.Length)
            {
                yield break;
            }
            else
            {
                yield return str[currentPosition + i];
            }
        }
    }

    private DataTableModel CreateDataTableModel(int CompanyId, string UploadUser, DateTime UploadDateTime, string DataTableName)
    {
        DataTableModel m = new();

        m.CompanyId = CompanyId;
        m.UploadUser = UploadUser;
        m.UploadDateTime = UploadDateTime;
        m.DataTableName = DataTableName;
        m.NumberOfRecords = 0; //not sure if needed, can be implemented later.
        m.IsDeleted = false;

        return m;
    }

    private DataColumnModel CreateDataColumnModel(int index, int DataTableId, int CompanyId, string dataColumnName, Boolean isEmail)
    {
        DataColumnModel m = new();

        m.DataColumnIndex = index;
        m.DataTableId = DataTableId;
        m.CompanyId = CompanyId;
        m.ColumnHeader = dataColumnName;
        m.IsEmailColumn = isEmail;

        return m;
    }

    private DataRowModel CreateDataRowModel(int index, int DataTableId, int CompanyId)
    {
        DataRowModel m = new();

        m.DataRowIndex = index;
        m.DataTableId = DataTableId;
        m.CompanyId = CompanyId;

        return m;
    }

    private DataCellModel CreateDataCellModel(int DataTableId, int DataRowId, int DataColumnId, int CompanyId, string CellValue)
    {
        DataCellModel m = new();

        m.DataTableId = DataTableId;
        m.DataRowId = DataRowId;
        m.DataColumnId = DataColumnId;
        m.CompanyId = CompanyId;
        m.CellValue = CellValue;

        return m;
    }


    // public int Id { get; set; }
    // public int DataTableId { get; set; }
    // public int DataRowId { get; set; }
    // public int DataColumnId { get; set; }
    // public int CompanyId { get; set; }
    // public string CellValue { get; set; }
    // public Boolean IsEmail { get; set; }
}
