@page "/Email/EmailTemplate/AddEmailTemplate"
@using ProofOfConceptBLZ.Data
@using DataAccessLibrary
@using Microsoft.AspNetCore.Identity
@using ProofOfConceptBLZ.Models
@using System.Security.Cryptography
@using System.Text

@inject IConfiguration _config
@inject NavigationManager _navigationManager;
@inject ISQLDataAccess _db;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject UserManager<ApplicationUser> _userManager

<PageTitle>Add New Email Template</PageTitle>

<h1>Add New Email Template</h1>

 
<AuthorizeView>
    <Authorized>

        <EditForm Model="@newEmailTemplate" OnValidSubmit="@AddEmailTemplate" Context="formContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="EmailTemplateName">Email Template Name:</label>
                <InputText id="EmailTemplateName" class="form-control" @bind-Value="newEmailTemplate.EmailTemplateName" />
            </div>
            <button class="btn btn-primary mt-3" type="submit">Create</button>
        </EditForm>

        @if (isLoading)
        {
            <br />
            <div class="spinner"></div>
        }
    </Authorized>
</AuthorizeView>


@code {
    private NewEmailTemplateModel newEmailTemplate = new NewEmailTemplateModel();

    Boolean isLoading;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user == null || !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo($"RedirectToLogin", false);
        }

    }

    private async Task AddEmailTemplate()
    {
        isLoading = true;
        int companyId = 0;
        string userId = "";

        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            companyId = await GetUserCompanyId(authState);
            userId = await GetUserId(authState);

            if (companyId == 0 || userId == "") throw(new Exception("Problem contacting the authentication server!"));

            NewEmailTemplateModel emailTemplateAdd = new NewEmailTemplateModel
                {
                    CompanyId = companyId,
                    AddedUserId = userId,
                    AddedDateTime = DateTime.UtcNow,
                    EmailTemplateName = newEmailTemplate.EmailTemplateName,
                    IsDeleted = false
                };

            int emailTemplateId = await _db.SaveDataReturn<int>("spEmailTemplate_Insert", emailTemplateAdd);

            string emailStoragePath = _config.GetValue<string>("EmailStorge");
            string emailTemplateFilepath = await CreateNewHTMLTemplate(emailStoragePath, companyId, emailTemplateId);
            await _db.SaveData("spEmailTemplateLocation_Update", new { Id = emailTemplateId, EmailTemplateLocation = emailTemplateFilepath });

            RedirectEditEmailTemplate(emailTemplateId);
        }
        catch (Exception e)
        {
            isLoading = false;
            throw (e);
        }

    }

    private async Task<int> GetUserCompanyId(AuthenticationState authState)
    {
        var user = authState.User;
        if (user == null || !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo($"RedirectToLogin", false);
            return 0;
        }
        else
        {
            var userM = await _userManager.FindByNameAsync(user.Identity.Name);
            return userM.CompanyID;

        }
    }

    private async Task<string> GetUserId(AuthenticationState authState)
    {
        var user = authState.User;
        if (user == null || !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo($"RedirectToLogin", false);
            return "";
        }
        else
        {
            var userM = await _userManager.FindByNameAsync(user.Identity.Name);
            return userM.Id;

        }
    }

    private void RedirectEditEmailTemplate(int id)
    {
        _navigationManager.NavigateTo("/Email/EmailTemplate/EditEmailTemplate/" + id.ToString(), true);
    }

    private async Task<string> CreateNewHTMLTemplate(string folderPath, int companyId, int emailTemplateId)
    {
        string filepath = Path.Combine(folderPath, companyId.ToString());
        Directory.CreateDirectory(filepath);
        filepath = Path.Combine(filepath, emailTemplateId.ToString() + ".html");

        using (FileStream fs = new FileStream(filepath, FileMode.Create))
        {
            using (StreamWriter w = new StreamWriter(fs, Encoding.UTF8))
            {
                w.WriteLine("<p>Edit your email template...</p>");
            }
        }

        return filepath;
    }

}
